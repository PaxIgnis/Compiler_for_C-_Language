Hendrik van der Meijden
CIS4650 W21
April, 2021

The program requires jFlex to be installed, and available as a PATH variable. 
The CUP jar is provided in the submission and does not need to be installed. 
To make the program just type ‘make’.

To  run the test files use the shortcuts from the makefile, which are testAST[0-9], testSYM[0-9], and testTM[0-9].

If you want to test other files here are the commands:

To test the tm code generation use: java -cp projects/java-cup-11b.jar:. CM -c C-programs/gcd.cm
To test the symbol table and type-checking use: java -cp projects/java-cup-11b.jar:. CM -s C-programs/gcd.cm
To test the Scanner use: java -cp projects/java-cup-11b.jar:. Scanner < C-programs/gcd.cm
To test the parser w/o AST: java -cp projects/java-cup-11b.jar:. CM C-programs/gcd.cm
To test the parser with AST: java -cp projects/java-cup-11b.jar:. CM -a C-programs/gcd.cm
(the AST will be in a file: C-programs/gcd.abs)

To run code on the TM simulator, type cd TMSimulator to get into the folder,
then type make to build it, and then type test[0-9] to use the make shortcut 
to run the generated files from the C-programs folder.

****
Test Files
****
Test files 1-4 are error free and demonstrate different functionality for the 
tm code generation.

Test files 5-8 have different errors, most of which will be seen by testing the 
syntax and type checking test cases.

Test file 9 is error free and shows more functionality of the tm code generation.

Test file 0 demonstrated return error catching by the type checker.

***********************************************
The report is below here as an alternate format the the pdf.
******

Checkpoint 3 Final Report

TM Simulator Code Generation

I tried to follow the incremental development plan as set out in the lecture slides for this checkpoint. 
Initially I tried to implement the basic code structure for the foundation, so I added the prelude code 
generation, the jump around the i/o functions, and the code for the input and output functions, and the 
finale. Then after I got this to look exactly like the sample output code from fac.cm (with respect to the 
final and prelude and other setup stuff) then I added the code for the function declaration, and then tested 
it with an empty main function. I needed to add a value to the function declaration to keep track of the 
address, so the jump code could make use of that. I decided to implement a hashmap to keep track of these 
declarations and their scopes, similarly to how I used it in checkpoint 2. After the empty function looked 
like the example from the lecture slides, I added a simple int declaration, and added the code generation 
to the VarDecList and SimpleDec. Then I added a simple assignment to that int. Then added code for expressions. 
I added call expressions and tested it using input and output functions, and this worked when tested in the 
tm machine. And at this point the test file 1.cm worked, which uses declarations, assignment, call expressions 
and the input/output functions.
I then added OpExp functionality, following examples from gcd and fac. Then added functionality for while loops, 
and at this stage I had all of the parts required to test the fac.cm provided code, so I compared all 69 instructions 
with the provided fac.tm and every instruction was identical. And test file 2.cm is the code from the fac example, 
which uses declarations, assignment, while loops and op expressions (greater than, subtraction and multiplication).
Then I added if expression functionality, followed by return expression functionality. 
At this point I had implemented all of the required functionality to test out the provided gcd program. 
So the test file 3.cm shows this functionality by using the gcd example code. This test file demonstrates 
the working functionality for global variable declarations, multiple function declarations, recursive function calls, 
chained op expressions (like u – u/v*v), assignment, input/output functions, if statements and function returns.
And the final test file for error free code, 4.cm is an example showing that nested blocks within functions is 
properly working. It shows that a variable that is redeclared inside of the nested block is properly stored and accessed.
I did not get to implementing the array declarations or the index vars for those declarations.

Flags

The three flags are: ‘a’ for the AST, ‘s’ for the syntax tree and ‘c’ for the code generation. 
The ‘-a’ flag is used to print out the ast to the <filename>.abs file. 
The ‘-s’ flag is used to print out the symbol table to the <filename>.sym file. 
The ‘-d’ flag is used to print out the generated code to the <filename>.tm file. 
As per the spec, only a single flag can be used at a time.

Assumptions and Limitations and Possible Improvements

•	It is assumed that if a file is correctly formatted without any errors it will always produce a correct syntax tree.
•	It is assumed that the program is run on a linux device, if not then the makefile may require some changes.
•	The ‘-a’ flag has been implemented, which means that if a user does not pass this flag, then the AST will not be generated, 
but the parsing will proceed. If this flag is passed in, then the AST will be created and all of the output from the program 
will be sent to a file with the same name as the provided file, except the ‘.cm.’ will be replaced with ‘.abs’. And likewise 
for both the ‘s’ and ‘c’ flags)
•	It is assumed that all input files will have the suffix ‘.cm’
•	The provided c minus sample files are provided in the folder ‘C-programs’, and the output files will also be in this folder.
•	Arrays and Index variables have not been implemented for the tm code generation, and thus the limitation stands that any files 
that have arrays or index vars will not produce working code. There was not enough time to implement this feature, but if there 
was more time than it could have been added.
•	Checking int functions for return statements currently implements a simple check, but it could be improved with a more rigorous 
check to ensure that no code comes after the last return statement.
•	Errors are printed to the std err, and all other output is sent to the relative file.
•	When generating code, the program first does a syntax and grammar check, and if there are errors, then an the code is not 
generated and an error is printed to std err.

What I learned

•	I learned how important it was to follow the incremental development plan laid out in the lecture slides.
•	I learned how to use the assembly instructions for the tm simulator and how this is quite similar to the 68k work I did in CIS2030.
•	I learned how much of a nightmare it is to end up with an offset off by one, and try to figure out where the problem stems from.
•	I learned about backpatching, and how to use this.
•	I learned about the calling sequence for functions and the like.
•	I learned new respect for all the compiler programmers out there who code in assembly as an area of expertise.

Building

The program requires jFlex to be installed, and available as a PATH variable. The CUP jar is provided in the submission 
and does not need to be installed. To make the program just type ‘make’. 
To  run the test files use the shortcuts from the makefile, which are testAST[0-9], testSYM[0-9], and testTM[0-9].
If you want to test other files here are the commands:
To test the tm code generation use: java -cp projects/java-cup-11b.jar:. CM -c C-programs/gcd.cm

To test the symbol table and type-checking use: java -cp projects/java-cup-11b.jar:. CM -s C-programs/gcd.cm
To test the Scanner use: java -cp projects/java-cup-11b.jar:. Scanner < C-programs/gcd.cm
To test the parser w/o AST: java -cp projects/java-cup-11b.jar:. CM C-programs/gcd.cm
To test the parser with AST: java -cp projects/java-cup-11b.jar:. CM -a C-programs/gcd.cm




A JFlex+Cup implementation for the Cplus language.

  Note that you need to modify the paths for CLASSPATH, JFLEX, and CUP in 
the Makefile so that the related commands can be found on your particular 
machine.  For example, the given settings are for the Linux server and the 
commented settings are for my macbook.

  Build instructions are inside the report.
  To rebuild the parser, type "make clean" and type "make" again.

  Also note that all the abstract syntax tree structures are defined under
the directory "absyn" and the methods for showing a syntax tree is implemented
by the visitor pattern in "ShowTreeVisitor.java".  Since some java files are 
generated automatically, they may contain variables that are not used, which 
are safe to ignore in the compilation process.
