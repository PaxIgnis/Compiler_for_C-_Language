/*
  Created by: Fei Song
  File Name: tiny.cup
  To Build: java java_cup.Main < tiny.cup
*/
   
   
/* ----------------------Preliminary Declarations Section--------------------*/
   
/* Import the class java_cup.runtime.*  */
//import java_cup.runtime.*;
import absyn.*;
   
/* Parser code to change the way the parser reports errors (include
   line and column number of the error). */
parser code {:
    
    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, Object info) {
   
        /* Create a StringBuffer called 'm' with the string 'Error' in it. */
        StringBuffer m = new StringBuffer("Error");
   
        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {                
                /* Add to the end of the StringBuffer error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuffer error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }
   
        /* Add to the end of the StringBuffer error message created in
           this method the message that was passed into this method. */
        m.append(" : "+message);
   
        /* Print the contents of the StringBuffer 'm', which contains
           an error message, out on a line. */
        System.err.println(m);
    }
   
    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

:};
   
   
/* ------------Declaration of Terminals and Non Terminals Section----------- */
   
terminal IF, ELSE, INT, RETURN, VOID, WHILE;
terminal PLUS, MINUS, TIMES, OVER, LT, LTEQ, GT, GTEQ, EQUALS, NEQUALS, EQ, SEMI, COM, LPAREN, RPAREN, LBRACK, RBRACK, LBRACE, RBRACE;
terminal String ID, NUM;
terminal ERROR;


non terminal DecList program, declar_list;
non terminal VarDecList param_list, params, local_declar;
non terminal ExpList stmt_list, arg_list;


non terminal Exp stmt, expr_stmt, selec_stmt, iter_stmt, return_stmt;
non terminal CompoundExp comp_stmt;
non terminal Exp exp;
non terminal Dec declar, fun_declar;
non terminal Var var;
non terminal VarDec var_declar, param;
non terminal NameTy type_specif;

precedence left ELSE, COM;
precedence nonassoc LT, LTEQ, GT, GTEQ, EQ, EQUALS, NEQUALS;
precedence left PLUS, MINUS;
precedence left TIMES, OVER;

/* ----------------------------Grammar Section-------------------- */
   
start with program;

program        ::= declar_list:d
                  {: RESULT = d; :}
                  ;

declar_list    ::= declar_list:d1 declar:d2
                     {: if (d1 == null) {
                           RESULT = new DecList(d2, null);
                        } else {DecList t = d1;
                           while ( t.tail != null )
                              t = t.tail;
                           t.tail = new DecList(d2, null);
                           RESULT = d1;
                        }
                     :}
                  | declar:d
                     {: RESULT = new DecList(d, null); :}
                  | error:e
                     {: parser.report_error("Declaration error", e); :}
                  ;

declar         ::= var_declar:v
                     {: RESULT = v; :}
                  | fun_declar:f
                     {: RESULT = f; :}
                  ;

var_declar     ::= type_specif:t ID:i SEMI
                     {: RESULT = new SimpleDec(tleft, tright, t, i); :}
                  | type_specif:t ID:i LBRACK NUM:n RBRACK SEMI
                     {: RESULT = new ArrayDec(tleft, tright, t, i, new IntExp(tleft, tright, n)); :}
                  | error:e ID:i SEMI
                     {: parser.report_error("Variable Declaration error, invalid type, substituting int", e);
                        RESULT = new SimpleDec(eleft, eright, new NameTy(eleft, eright, NameTy.INT), i);
                     :}
                  ;

type_specif    ::= INT:i
                     {: RESULT = new NameTy(ileft, iright, NameTy.INT); :}
                  | VOID:v
                     {: RESULT = new NameTy(vleft, vright, NameTy.VOID); :}
                  ;

fun_declar     ::= type_specif:t ID:i LPAREN params:p RPAREN comp_stmt:c
                     {: RESULT = new FunctionDec(tleft, tright, t, i, p, c); :}
                  | error:e ID:i LPAREN params:p RPAREN comp_stmt:c
                     {: parser.report_error("Function Declaration error, invalid type, substituting int", e);
                        RESULT = new FunctionDec(eleft, eright, new NameTy(eleft, eright, NameTy.INT), i, p, c); :}
                  ;

params         ::= param_list:p
                     {: RESULT = p; :}
                  | VOID:v
                     {: RESULT = new VarDecList(new SimpleDec(vleft, vright, new NameTy(vleft, vright, NameTy.VOID), ""), null); :}
                  ;

param_list     ::= param_list:p1 COM param:p2
                     {: if (p1 == null) {
                           RESULT = new VarDecList(p2, null);
                        } else {
                           VarDecList t = p1;
                           while( t.tail != null )
                              t = t.tail;
                           t.tail = new VarDecList(p2, null);
                           RESULT = p1;
                        }
                     :}
                  | param:p
                     {: RESULT = new VarDecList(p, null); :} /* TODO: Put error detection below */
                  ;

param          ::= type_specif:t ID:i
                     {: RESULT = new SimpleDec(tleft, tright, t, i); :}
                  | type_specif:t ID:i LBRACK RBRACK
                     {: RESULT = new ArrayDec(tleft, tright, t, i, new IntExp(tleft, tright, "0")); :}
                  ;

comp_stmt      ::= LBRACE local_declar:l stmt_list:s RBRACE
                     {: RESULT = new CompoundExp(lleft, lright, l, s); :}
                  ;

local_declar   ::= local_declar:l var_declar:v
                     {: if (l == null) {
                           RESULT = new VarDecList(v, null);
                        } else {
                           VarDecList t = l;
                           while( t.tail != null )
                              t = t.tail;
                           t.tail = new VarDecList(v, null);
                           RESULT = l;
                        }
                     :}
                  |
                     {: RESULT = null; :} /* TODO: Fix null handling in absyn files
                                             should this be new VarDecList(null, null)? */
                  ;

stmt_list      ::= stmt_list:s1 stmt:s2
                     {: if (s1 == null) {
                           RESULT = new ExpList(s2, null);
                        } else {
                           ExpList t = s1;
                           while( t.tail != null )
                              t = t.tail;
                           t.tail = new ExpList(s2, null);
                           RESULT = s1;
                        }
                     :}
                  |
                     {: RESULT = null; :} 
                  ;

stmt           ::= expr_stmt:e
                     {: RESULT = e; :}
                  | comp_stmt:c
                     {: RESULT = c; :}
                  | selec_stmt:s
                     {: RESULT = s; :}
                  | iter_stmt:i
                     {: RESULT = i; :}
                  | return_stmt:r
                     {: RESULT = r; :}
                  ;

expr_stmt      ::= exp:e SEMI
                     {: RESULT = e; :}
                  | SEMI:s
                     {: RESULT = new NilExp(sleft, sright); :} /* TODO: should this be simplified? */
                  ;

selec_stmt     ::= IF:i LPAREN exp:e RPAREN stmt:s
                     {: RESULT = new IfExp(ileft, iright, e, s, null); :}
                  | IF:i LPAREN exp:e RPAREN stmt:s1 ELSE stmt:s2
                     {: RESULT = new IfExp(ileft, iright, e, s1, s2); :}
                  ;

iter_stmt      ::= WHILE:w LPAREN exp:e RPAREN stmt:s
                     {: RESULT = new WhileExp(wleft, wright, e, s); :}
                  ;

return_stmt    ::= RETURN:r exp:e SEMI
                     {: RESULT = new ReturnExp(rleft, rright, e); :}
                  | RETURN:r SEMI
                     {: RESULT = new ReturnExp(rleft, rright, new NilExp(rleft, rright)); :} /* TODO: should null be passed instead of NilExp? */
                  ;

exp            ::= var:v EQ exp:e
                     {: RESULT = new AssignExp(vleft, vright, new VarExp(vleft, vright, v), e); :}
                  | exp:e1 LTEQ exp:e2
                     {: RESULT = new OpExp(e1left, e1right, e1, OpExp.LTEQ, e2); :}
                  | exp:e1 LT exp:e2
                     {: RESULT = new OpExp(e1left, e1right, e1, OpExp.LT, e2); :}
                  | exp:e1 GT exp:e2
                     {: RESULT = new OpExp(e1left, e1right, e1, OpExp.GT, e2); :}
                  | exp:e1 GTEQ exp:e2
                     {: RESULT = new OpExp(e1left, e1right, e1, OpExp.GTEQ, e2); :}
                  | exp:e1 EQUALS exp:e2
                     {: RESULT = new OpExp(e1left, e1right, e1, OpExp.EQUALS, e2); :}
                  | exp:e1 NEQUALS exp:e2
                     {: RESULT = new OpExp(e1left, e1right, e1, OpExp.NEQUALS, e2); :}
                  | exp:e1 PLUS exp:e2
                     {: RESULT = new OpExp(e1left, e1right, e1, OpExp.PLUS, e2); :}
                  | exp:e1 MINUS exp:e2
                     {: RESULT = new OpExp(e1left, e1right, e1, OpExp.MINUS, e2); :}
                  | exp:e1 TIMES exp:e2
                     {: RESULT = new OpExp(e1left, e1right, e1, OpExp.TIMES, e2); :}
                  | exp:e1 OVER exp:e2
                     {: RESULT = new OpExp(e1left, e1right, e1, OpExp.OVER, e2); :}
                  | LPAREN exp:e RPAREN
                     {: RESULT = e; :}
                  | ID:i LPAREN arg_list:a RPAREN
                     {: RESULT = new CallExp(ileft, iright, i, a); :}
                  | ID:i LPAREN RPAREN
                     {: RESULT = new CallExp(ileft, iright, i, null); :} /* TODO: is passing null the best solution? */
                  | NUM:n
                     {: RESULT = new IntExp(nleft, nright, n); :}
                  | var:v
                    {: RESULT = new VarExp(vleft, vright, v); :}
                  ;

var            ::= ID:i
                    {: RESULT = new SimpleVar(ileft, iright, i); :}
                  | ID:i LBRACK exp:e RBRACK
                    {: RESULT = new IndexVar(ileft, iright, i, e); :}
                  ;

arg_list       ::= arg_list:a COM exp:e
                     {: ExpList t = a;
                        while( t.tail != null )
                           t = t.tail;
                        t.tail = new ExpList(e, null);
                        RESULT = a;
                     :}
                  | exp:e
                     {: RESULT = new ExpList(e, null); :}
                  | error COM exp:e
                     {: parser.report_error("Invalid argument in argument list", null);
                        RESULT = new ExpList(e, null); 
                     :}
                  | arg_list:a COM error
                     {: parser.report_error("Invalid argument in argument list", null);
                        RESULT = a; 
                     :}
                  | error
                     {: parser.report_error("Invalid argument in argument list", null); :}
                  ;